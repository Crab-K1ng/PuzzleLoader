plugins {
    id 'java'
    id 'maven-publish'
    id 'jigsaw'
    id 'com.github.johnrengelman.shadow'
}

group = 'com.github'

repositories {
    mavenCentral()
    maven { url "https://libraries.minecraft.net" }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
}

loom {
    splitEnvironmentSourceSets()
    accessWidenerPath = file("src/main/resources/puzzle_loader.manipulator")

    mods {
        "puzzle-loader" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

dependencies {
    compileOnly('org.jetbrains:annotations:24.0.0')

    cosmicReach("finalforeach:cosmicreach:${cosmic_reach_client_version}")
    bundle(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixinExtrasVersion"))

    bundle("com.google.guava:guava:$guavaVersion")
    bundle("com.google.code.gson:gson:$gsonVersion")

    bundle("org.hjson:hjson:$hjsonVersion")

    bundle("com.mojang:brigadier:1.0.18")

    bundle("org.apache.logging.log4j:log4j-api:$log4jVersion")
    bundle("org.apache.logging.log4j:log4j-core:$log4jVersion")
    bundle("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

    bundle("net.sf.jopt-simple:jopt-simple:$joptSimpleVersion")

    bundle("org.reflections:reflections:$reflectionsVersion")

    bundle("dev.dewy:nbt:$nbtVersion")

    bundle("meteordevelopment:orbit:$eventbusVersion")
    //bundle("org.greenrobot:eventbus:$eventbusVersion")

    bundle("org.jline:jline:3.25.0")
    bundle("org.apache.commons:commons-lang3:3.17.0")
    bundle("org.fusesource.jansi:jansi:2.2.0"){
        exclude(group: "org.apache.commons", module: "commons-lang3") // use higher version above for paradox compat
    }

}

processResources {
    def resourceTargets = ["assets/puzzle-loader/version.txt"]

    String ver = version
    if (!ver.contains(".")) {
        ver = "69.69.69"
    } else ver = (version + "").replaceAll((version + "").replaceAll("[\\d\\.]", ""), "")

    def replaceProperties = [
            "version"     : ver,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

            artifact source: buildMergedBundleJar, classifier: 'client', extension: 'jar'
            artifact source: buildServerBundleJar, classifier: 'server', extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}