import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.puzzle.buildsrx.GameScanner
import com.github.puzzle.buildsrx.GenericTransformer
import com.github.puzzle.buildsrx.transformers.ApiClassTransformer

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
}

sourceSets {
    api
    backend_0_3_25
}

group = 'com.github'
version = '69.69.69'

repositories {
    mavenCentral()
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
}

configurations {
    require
    backend_0_3_25Implementation.extendsFrom(require)

    embed
    backend_0_3_25Implementation.extendsFrom(embed)

    api
    apiImplementation.extendsFrom(api)

    compile
    apiCompileOnly.extendsFrom(compile)
    backend_0_3_25CompileOnly.extendsFrom(compile)
}

var gdxVersion = "1.13.0"
var puzzleVersion = "2.3.1"

var crUrl = "https://github.com/CRModders/CosmicArchive/raw/refs/heads/main/versions/pre-alpha/${cosmic_reach_client_version}/client/Cosmic%20Reach-${cosmic_reach_client_version}.jar"

File libFolder = file("lib")
if (!libFolder.exists()) libFolder.mkdir()

File crFile = file("lib/cr${cosmic_reach_client_version}.jar")
if (!crFile.exists()) {
    try {
        new URL(crUrl).withInputStream { i -> crFile.withOutputStream { it << i}}
    } catch (Exception ignore) {
        new URL(crUrl.replaceAll("%20", "-")).withInputStream { i -> crFile.withOutputStream { it << i}}
    }
}

dependencies {
    compile 'org.jetbrains:annotations:24.0.0'

    api "com.badlogicgames.gdx:gdx:$gdxVersion"

    require "com.github.PuzzleLoader:PuzzleLoader:${puzzleVersion}:client"
    embed files("./lib/api.jar")
    require files(crFile)
}

processBackend_0_3_25Resources {
    // Locations of where to inject the properties
    def resourceTargets = [ "puzzle.mod.json" ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "crVersion"     : cosmic_reach_client_version,
    ]

    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

tasks.register("buildAPI", Jar) {
    group = "buildSrc"
    from sourceSets.api.output

    doLast {
        GameScanner.scan(crFile)
        GenericTransformer.transform(archiveFile.get().getAsFile(), new ApiClassTransformer())

        /* Rename & Move archive from /build/libs/api-x.y.z.jar to /lib/api.jar */
        File archive = new File(archiveFile.get().getAsFile().absolutePath);
        archive.renameTo(new File("$projectDir/lib/api.jar"))
    }
}

tasks.register("buildBackend-0.3.25", ShadowJar) {
    group = "buildSrc"
    configurations = [ project.configurations.embed ]
    from sourceSets.backend_0_3_25.output
    from processBackend_0_3_25Resources.outputs
}


