import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.puzzle.buildsrx.ReturnReplaceTask

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
}

sourceSets {
    api
    backend_0_3_23
}

group = 'com.github'
version = '69.69.69'

repositories {
    mavenCentral()
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
}

configurations {
    combine
    compileOnlyBackend_0_3_23.extendsFrom(combine)
}

var gdxVersion = "1.13.0"
var puzzleVersion = "2.3.1"

var crVersion = "0.3.23"
var crUrl = "https://github.com/CRModders/CosmicArchive/raw/refs/heads/main/versions/pre-alpha/${crVersion}/client/Cosmic%20Reach-${crVersion}.jar"
var crUrl1 = "https://github.com/CRModders/CosmicArchive/raw/refs/heads/main/versions/pre-alpha/${crVersion}/client/Cosmic-Reach-${crVersion}.jar"

File crFile = file("cr${crVersion}.jar")
if (!crFile.exists()) {
    try {
        new URL(crUrl).withInputStream { i -> crFile.withOutputStream { it << i}}
    } catch (Exception ignore) {
        new URL(crUrl1).withInputStream { i -> crFile.withOutputStream { it << i}}
    }
}

String apiJar = jar.archivePath.toPath().toAbsolutePath().toString();

System.out.println(apiJar)

dependencies {
    apiImplementation "com.badlogicgames.gdx:gdx:$gdxVersion"

    backend_0_3_23Implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    backend_0_3_23Implementation files(crFile)
    backend_0_3_23Implementation "com.github.PuzzleLoader:PuzzleLoader:${puzzleVersion}:client"
    backend_0_3_23Implementation files("./api.jar")

    combine files("./api.jar")
}

tasks.register("buildAPI", Jar) {
    group = "buildSrc"
    from sourceSets.api.output

    doLast {
        ReturnReplaceTask.transform2(archiveFile.get().asFile, crFile);
        new File(archiveFile.get().getAsFile().absolutePath).renameTo(new File("./api.jar"))
    }
}

tasks.register("buildBackend-0_3_23", ShadowJar) {
    group = "buildSrc"
    configurations = [ project.configurations.combine ]
    from sourceSets.backend_0_3_23.output
}

//tasks.register("buildBackendJar-0_3_23", ShadowJar) {
//    group = "buildSrc"
//    configurations = [project.configurations.compileClasspath]
//    from sourceSets.backend_0_3_23.output
//}
